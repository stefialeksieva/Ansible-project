---
- name: Create EC2 Instances for Load Balancer and Application Servers
  hosts: localhost
  gather_facts: no
  vars_files:
    - /etc/ansible/vars/vars.yaml

  vars:
    instance_type: t2.micro
    instance_name: app-server1
    image: ami-019374baf467d6601
    wait: yes
    group: webserver
    region: eu-west-2
    lb: alb
    security_group: security-group-app-server1

  tasks:
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: security-group-app-server1
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        region: "{{ region }}"
        rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: "{{ ssh_access_ip }}"
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0  # you could change it to be secure via specifing the HTTP access only from a specific IP range but I leave it from anywhere because I don't have internal network or trusted IP at the moment for the task  
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0 # you could change it to be secure via specifing the HTTPS access only from a specific IP range but I leave it from anywhere because I don't have internal network or trusted IP at the moment for the task
            - proto: udp
              from_port: 53
              to_port: 53
              cidr_ip: 0.0.0.0/0 # Allow DNS traffic
        state: present
        tags:
          Name: sg-1

      register: sg
      delegate_to: localhost

    - name: Create a security group
      debug:
        msg: "Security Group created with ID: {{ sg.security_group_id }}

    - name: Provision Load Balancer (HAProxy) EC2 Instance
      ec2_instance:
        security_group: "{{ security_group }}"
        name: "{{ instance_name }}"
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        instance_type: "{{ instance_type}}"
        image_id: "{{ image }}"
        region: "{{ region }}"
        count: 1
        wait: yes
        instance_tags:
          Name: load-balancer
        assign_public_ip: yes
      register: lb_instance

  - name: Provision Application Server 1 EC2 Instance
    ec2_instance:
        security_group: "{{ security_group }}"
        name: "{{ instance_name }}"
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        instance_type: "{{ instance_type}}"
        image_id: "{{ image }}"
        region: "{{ region }}"
        count: 1
        wait: yes
        instance_tags:
          Name: app-server-1
        assign_public_id: yes
    register: app1_instance

  - name: Provision Application Server 2 EC2 Instance
    ec2_instance:
        security_group: "{{ security_group }}"
        name: "{{ instance_name }}"
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        instance_type: "{{ instance_type}}"
        image_id: "{{ image }}"
        region: "{{ region }}"
        count: 1
        wait: yes
        instance_tags:
          Name: app-server-2
        assign_public_id: yes
    register: app2_instance

  - name: Install HAProxy on Load Balancer
    hosts: "{{ lb_instance.instances[0].public_ip }}"
    become: yes
    tasks:
      - name: Update apt cache
        apt:
          update_cache: yes

      - name: Install HAProxy
        apt:
          name: haproxy
          state: present

      - name: Install HAProxy
        apt:
          name: haproxy
          state: present

      - name: Generate a self-signed key for HAproxy certificate
        command:
          cmd: "openssl genkey -algorithm RSA -out /etc/ssl/private/haproxy.key -aes256"
          creates: /etc/ssl/private/haproxy.key

      - name: Generate a self-signed certificate for HAproxy
        command:
          cmd: >
            openssk req -new -x509 -key /etc/ssl/private/haproxy.key -out /etc/ssl/certs/haproxy.crt -days 365 -subj "/CN=localhost"
          creates: /etc/ssl/private/haproxy.crt

      - name: Configure HAProxy for Load Balancing
        copy:
          dest: /etc/haproxy/haproxy.cfg
          content: |
            global
              log /dev/log local0
              log /dev/log local1 notice
              maxconn 2000
              user haproxy
              group haproxy
              daemon
              tune.ssl.default-dh-param 2048

            defaults
              log global
              option httplog
              option dontlognull
              timeout connect 5000ms
              timeout client 10000ms
              timeout sever 10000ms
              timeout http-keep-alive 10s
              timeout check 2000 ms

            frontend https_front
              bind *:443 ssl crt /etc/ssl/certs/haproxy.crt key /etc/ssl/private/haproxy.key
              mode http
              default_backend servers 

            backend servers
              balance roundrobin
              option http-server-close
              option forwardfor
              server app1 {{ app1_instance.instances[0].public_ip }}:443 check

      - name: Ensure HAProxy service is running and enabled
        service:
          name: haproxy
          state: started
          enabled: yes

      - name: Reload HAproxy to apply configuration changes
        command: systemctl reload haproxy # check that ***

  - name: Configure Application servers
    hosts: "{{ item.public_ip }}"
    become: yes
    with_items:
      - "{{ app1_instance.instances[0] }}"
      - "{{ app2_instance.instances[0] }}"
    tasks:
      - name: 
          
